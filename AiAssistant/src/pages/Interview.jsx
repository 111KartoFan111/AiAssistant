import React, { useState } from 'react';
import { useLocation, useNavigate } from 'react-router-dom';

const Interview = () => {
  const location = useLocation();
  const navigate = useNavigate();
  const { field, position, mode } = location.state || {};

  const [currentQuestion, setCurrentQuestion] = useState(0);
  const [isRecording, setIsRecording] = useState(false);
  const [showKeyboard, setShowKeyboard] = useState(false);

  // –ü—Ä–∏–º–µ—Ä–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã (–ø–æ—Ç–æ–º –±—É–¥—É—Ç –æ—Ç AI)
  const questions = [
    {
      type: 'Background question',
      text: 'Can you please tell me a bit about yourself?'
    },
    {
      type: 'Technical question',
      text: 'What are your strongest technical skills?'
    },
    {
      type: 'Experience question',
      text: 'Tell me about a challenging project you worked on.'
    },
    {
      type: 'Behavioral question',
      text: 'How do you handle conflicts in a team?'
    },
    {
      type: 'Closing question',
      text: 'Do you have any questions for us?'
    }
  ];

  const currentQ = questions[currentQuestion];
  const totalQuestions = questions.length;

  const handleAnswer = () => {
    setIsRecording(!isRecording);
  };

  const handleNext = () => {
    if (currentQuestion < totalQuestions - 1) {
      setCurrentQuestion(currentQuestion + 1);
      setIsRecording(false);
    } else {
      // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–≤—å—é
      navigate('/interview-results');
    }
  };

  const handleBack = () => {
    navigate('/dashboard');
  };

  return (
    <div className="min-h-screen bg-gray-100 flex flex-col">
      {/* –•–µ–¥–µ—Ä */}
      <header className="bg-white shadow-sm">
        <div className="max-w-7xl mx-auto px-6 py-4 flex items-center justify-between">
          <button 
            onClick={handleBack}
            className="flex items-center text-gray-600 hover:text-gray-900 transition"
          >
            <span className="mr-2">‚Üê</span> Data Analytics
          </button>
          
          <div className="flex items-center gap-2">
            <span className="text-lg font-semibold">interview</span>
            <span className="text-blue-500 text-lg font-semibold">warmup</span>
          </div>
          
          <div className="flex items-center gap-4">
            <button className="text-gray-600 hover:text-gray-900">
              üîä
            </button>
            <button className="text-gray-600 hover:text-gray-900">
              ‚ãÆ
            </button>
          </div>
        </div>
      </header>

      {/* –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç */}
      <main className="flex-1 flex items-center justify-center p-6">
        <div className="max-w-4xl w-full bg-white rounded-3xl shadow-xl p-8 md:p-12">
          {/* –¢–∏–ø –≤–æ–ø—Ä–æ—Å–∞ –∏ –Ω–æ–º–µ—Ä */}
          <div className="flex items-center justify-between mb-6">
            <div className="flex items-center gap-2 text-blue-600">
              <span className="text-lg">‚ÑπÔ∏è</span>
              <span className="font-medium">{currentQ.type}</span>
            </div>
            <span className="text-gray-500 font-medium">
              {currentQuestion + 1}/{totalQuestions}
            </span>
          </div>

          {/* –í–æ–ø—Ä–æ—Å */}
          <h2 className="text-3xl md:text-4xl font-semibold text-gray-800 mb-12">
            {currentQ.text}
          </h2>

          {/* –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è */}
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-3">
              {/* –ö–Ω–æ–ø–∫–∞ Answer */}
              <button
                onClick={handleAnswer}
                className={`flex items-center gap-2 px-8 py-4 rounded-2xl font-semibold text-lg transition shadow-lg ${
                  isRecording
                    ? 'bg-red-500 hover:bg-red-600 text-white'
                    : 'bg-blue-500 hover:bg-blue-600 text-white'
                }`}
              >
                {isRecording ? (
                  <>
                    <span className="w-3 h-3 bg-white rounded-full animate-pulse"></span>
                    Recording...
                  </>
                ) : (
                  <>
                    <span className="text-xl">üé§</span>
                    Answer
                  </>
                )}
              </button>

              {/* –ö–Ω–æ–ø–∫–∞ Keyboard */}
              <button
                onClick={() => setShowKeyboard(!showKeyboard)}
                className="p-4 border-2 border-gray-300 rounded-2xl hover:border-blue-400 hover:bg-blue-50 transition"
                title="Type answer"
              >
                <span className="text-xl">‚å®Ô∏è</span>
              </button>

              {/* –ö–Ω–æ–ø–∫–∞ Hint */}
              <button
                className="p-4 border-2 border-gray-300 rounded-2xl hover:border-blue-400 hover:bg-blue-50 transition"
                title="Get hint"
              >
                <span className="text-xl">üí°</span>
              </button>
            </div>

            {/* –ö–Ω–æ–ø–∫–∞ Next */}
            <button
              onClick={handleNext}
              className="p-4 border-2 border-gray-300 rounded-2xl hover:border-blue-500 hover:bg-blue-50 transition"
            >
              <span className="text-xl text-blue-500">‚Üí</span>
            </button>
          </div>

          {/* –¢–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ (–µ—Å–ª–∏ –∞–∫—Ç–∏–≤–µ–Ω —Ä–µ–∂–∏–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã) */}
          {showKeyboard && (
            <div className="mt-6">
              <textarea
                className="w-full px-4 py-3 border-2 border-gray-300 rounded-xl focus:border-blue-500 focus:ring-2 focus:ring-blue-200 outline-none transition resize-none"
                rows="4"
                placeholder="Type your answer here..."
              />
            </div>
          )}
        </div>
      </main>
    </div>
  );
};

export default Interview;